set timeout=5 
set default="0"
#Disable signature checks; we rely on secureboot to ensure 
#that the grub efi is signed and use a hashlist to verify UEFI images
#booted subsequently
set check_signatures=no
set pager=0

menuentry   'Windows EFI Boot Manager' {
	set efibootmgr=/efi/Microsoft/Boot/bootmgfw.efi
	getbootpartition  file  $efibootmgr
	chainloader $efibootmgr
	echo Grub is now loading  Windows EFI Boot Manager
}

menuentry   'Win10 + EdgeOS' {
    set rthfile=/rth/rthx86
    set efifile=/efi/Microsoft/Boot/bootmgfw.efi
    getbootpartition file $rthfile
    multiboot2 $rthfile
    module2    /rth/license.txt
    module2    /rth/Windows_EdgeOS.txt
    module2    /rth/EdgeOS/mblinux_sda2 mbLinuz_sda2
    getbootpartition file $efifile
    module2    $efifile          $efifile
    echo Grub is now loading  Win10 + EdgeOS
}

menuentry   'Win10 + EdgeOS (secure)' {
    set rthfile=/rth/rthx86
    getbootpartition file $rthfile
    hashsum --hash sha256 --check (memdisk)/hashlist.txt --prefix /rth

    if [ $? -eq 0 ]; then
        multiboot2 $rthfile
        module2    /rth/license.txt
        module2    /rth/Windows_EdgeOS.txt
        module2    /rth/EdgeOS/mblinux_sda2 mbLinuz_sda2
	set efifile=/efi/Microsoft/Boot/bootmgfw.efi
        getbootpartition file $efifile
        module2    $efifile          $efifile
        echo Grub is now loading  Win10 + EdgeOS (secure)
    fi
}

menuentry   'Win10 + EdgeOS (secure - hash on disk)' {
    set rthfile=/rth/rthx86
    getbootpartition file $rthfile
    hashsum --hash sha256 --check /rth/hashlist.txt --prefix /rth

    if [ $? -eq 0 ]; then
        multiboot2 $rthfile
        module2    /rth/license.txt
        module2    /rth/Windows_EdgeOS.txt
        module2    /rth/EdgeOS/mblinux_sda2 mbLinuz_sda2
    	set efifile=/efi/Microsoft/Boot/bootmgfw.efi
        getbootpartition file $efifile
        module2    $efifile          $efifile
        echo Grub is now loading  Win10 + EdgeOS (secure)
    fi
}

function getbootpartition {
    set searchtype=$1
    set partsearch=$2
    if [ $searchtype = label ] ; then
        search.fs_label $partsearch rootaddress
    else 
        search.file     $partsearch rootaddress
    fi
    if [ $? = 0 ] ; then
        set root=($rootaddress)
        echo
        echo Grub is setting root to $root
        echo The boot partion $searchtype is $partsearch
        echo
    else
        echo Grub cannot find $partsearch
    fi
}
